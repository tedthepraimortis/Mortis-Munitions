// Just to get rid of the Sabot as it looks really scuffed. - [Ted]
class HDB_MM6mmFlechette:HDB_6mmFlechette{
	override void postbeginplay(){
		resetrandoms();
		realpos=pos;
		gunsmoke();
		if(distantsound!="")distantnoise.make(self,distantsound,distantsoundvol,distantsoundpitch);
		scalebullet();
	}
}

class HDTaronga : WAN_20mmLauncher
{
    enum TarongaFlags
    {
        TRF_JustUnload = 1,
        TRF_GrenadeLoaded = 2,
        TRF_GL = 4
    }

    enum TarongaProperties
    {
        TRProp_Flags,
        TRProp_Chamber,
        TRProp_Mode,
        TRProp_Heat,
        TRProp_Muck,
        TRProp_LoadType
    }

    override void PostBeginPlay()
    {
        // hehe 1337 the UaS number - [Ted]
        weaponspecial = 1337;
        Super.PostBeginPlay();
    }

    override void tick()
    {
        super.tick();
        drainheat(TRProp_Heat, 1);

        if(owner && WeaponStatus[TRProp_Heat] > 65 && !(Level.time % TICRATE))
        {
            owner.damagemobj(owner, owner, 2, "electrical");
        }
        
        if (!(WeaponStatus[TRProp_Flags] & TRF_GL) && WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
        {
            WeaponStatus[TRProp_Flags] &= ~TRF_GrenadeLoaded;
            Actor ptr = owner ? owner : Actor(self);
            ptr.A_SpawnItemEx('WAN_20mmGrenadeAmmo', cos(ptr.pitch) * 10, 0, ptr.height - 10 - 10 * sin(ptr.pitch), ptr.vel.x, ptr.vel.y, ptr.vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
            ptr.A_StartSound("weapons/targrenopen", CHAN_WEAPON);
        }
    }

    override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
    override HDWeapon GetSpareWeapon(actor newowner, bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
    override double GunMass()
    {
        double BaseMass = 8.5;
        if (WeaponStatus[TRProp_Flags] & TRF_GL)
        {
            BaseMass += 1.5;
        }
        if (WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
        {
            BaseMass += 1;
        }
        return BaseMass;
    }

    override double WeaponBulk()
    {
        double BaseBulk = 180;
        if (WeaponStatus[TRProp_Flags] & TRF_GL)
        {
            BaseBulk += 20;
        }
        if (WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
        {
            BaseBulk += ENC_ROCKETLOADED;
        }
        return BaseBulk;
    }

    override string PickupMessage()
    {
        string GLString = WeaponStatus[TRProp_Flags] & TRF_GL ? Stringtable.localize("$PICKUP_TARONGA_GL") : "";

        return Stringtable.localize("$PICKUP_TARONGA_PREFIX")..Stringtable.Localize("$TAG_TARONGA")..GLString..Stringtable.localize("$PICKUP_Taronga_SUFFIX");
    }

    override string, double GetPickupSprite()
    {
        return WeaponStatus[TRProp_Flags] & TRF_GL ? "HRFPB0" : "HRFPA0", 1.0;
    }

    override void LoadoutConfigure(string input)
    {
        if (GetLoadoutVar(input, "gl", 1) > 0)
        {
            WeaponStatus[TRProp_Flags] |= TRF_GL;
        }

        InitializeWepStats(false);
    }

    override void InitializeWepStats(bool idfa)
    {
        WeaponStatus[TRProp_Chamber] = 1;
        if (WeaponStatus[TRProp_Flags] & TRF_GL)
        {
            WeaponStatus[TRProp_Flags] |= TRF_GrenadeLoaded;
        }
    }
    
    override void DoEffect(){
		let hdp=hdplayerpawn(owner);
		if(hdp){
			//droop downwards
			if(!hdp.gunbraced && !!hdp.player && hdp.player.readyweapon==self && hdp.strength && hdp.pitch<frandom(5,8))
            {
                hdp.A_MuzzleClimb((frandom(-0.05,0.05),frandom(0.1,clamp(1-pitch,0.06/hdp.strength,0.12))),(0,0),(0,0),(0,0));
    		}
        }
		Super.DoEffect();
	}

    override string GetHelpText()
    {
        LocalizeHelp();
        return 
        LWPHELP_FIRESHOOT
        ..LWPHELP_ALTFIRE..Stringtable.Localize("$TARONGA_HELPTEXT_4")
        ..(WeaponStatus[TRProp_Flags] & TRF_GL ? LWPHELP_ZOOM.." + "..LWPHELP_ALTFIRE.. Stringtable.Localize("$TARONGA_HELPTEXT_1") : "")
        ..(WeaponStatus[TRProp_Flags] & TRF_GL ? LWPHELP_ALTRELOAD.. Stringtable.Localize("$TARONGA_HELPTEXT_2") : "")
        ..(WeaponStatus[TRProp_Flags] & TRF_GL ? LWPHELP_FIREMODE.." + "..LWPHELP_UNLOAD.. Stringtable.Localize("$TARONGA_HELPTEXT_3") : "")
        ..LWPHELP_MAGMANAGER;
    }

    override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
    {
        if (hdw.WeaponStatus[TRProp_Chamber] == 1)
        {
            sb.DrawRect(-22, -8, 6, 3);
            sb.DrawRect(-23, -7, 1, 1);
        }

        if (hdw.WeaponStatus[TRProp_Flags] & TRF_GL)
        {
            sb.DrawImage("MA7GB0",(-50, -4), sb.DI_SCREEN_CENTER_BOTTOM, scale: (1.1, 1.1));
            sb.DrawNum(hpl.CountInv('WAN_20mmGrenadeAmmo'), -48, -8, sb.DI_SCREEN_CENTER_BOTTOM);
        }

        if (hdw.WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
        {
            sb.DrawRect(-22, -13, 6, 3);
        }
        sb.DrawWepCounter(hdw.WeaponStatus[TRProp_Mode], -26, -5, "RBRSA3A7", "STBURAUT", "STFULAUT");
    }

    action void A_ChamberGrit(int amt,bool onlywhileempty=false)
    {
        int ibg = invoker.weaponstatus[TRProp_Muck];
        if(!onlywhileempty||invoker.weaponstatus[TRProp_Chamber]<1)ibg+=amt;
        else if(!random(0,4))ibg++;
        invoker.weaponstatus[TRProp_Muck]=clamp(ibg,0,100);
    }

    int jamchance()
    {
        int jc=
        weaponstatus[TRProp_Muck]
        +(weaponstatus[TRProp_Heat]>>2)
        +weaponstatus[TRProp_Chamber];
        return jc;
    }

    override void DropOneAmmo(int amt)
    {
        if (owner)
        {
            double OldAngle = owner.angle;
            amt = clamp(amt, 1, 10);
            if (owner.CheckInventory('HD6mmFlechetteAmmo', 1))
            {
                owner.A_DropInventory('HD6mmFlechetteAmmo', amt * 50);
                owner.angle += 15;
            }
            if (owner.CheckInventory('WAN_20mmGrenadeAmmo', 1))
            {
                owner.A_DropInventory('WAN_20mmGrenadeAmmo', 1);
            }
            owner.angle = OldAngle;
        }
    }

    override void DrawSightPicture(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl, bool sightbob, vector2 bob, double fov, bool scopeview, actor hpc, string whichdot)
    {
        int cx, cy, cw, ch;
        [cx, cy, cw, ch] = Screen.GetClipRect();
        sb.SetClipRect(-16 + bob.x, -4 + bob.y, 32, 16, sb.DI_SCREEN_CENTER);
        vector2 bob2 = bob * 1.18;
        sb.DrawImage("BCHFRONT", (0, -4) + bob2, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP, alpha: 0.9, scale: (0.8, 0.8));
        sb.SetClipRect(cx, cy, cw, ch);
        sb.DrawImage("BCHBACK", (0, 2) + bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP, scale: (0.8, 0.8));
    }

    private action void A_TryLoadChamber()
    {
        if (invoker.Storage && invoker.Storage.owner == invoker.owner && invoker.Storage.Storage && invoker.weaponstatus[TRProp_Chamber] < 2)
        {
            if (invoker.WeaponStatus[TRProp_Chamber] == 0)
            {
                if (invoker.AmmoReserve && invoker.AmmoReserve.Amounts.Size() > 0 && invoker.AmmoReserve.Amounts[0] > 0)
                {
                    invoker.Storage.Storage.RemoveItem(invoker.AmmoReserve, null, null, 1);
                    invoker.WeaponStatus[TRProp_Chamber] = 1;
                }
                else
                {
                    invoker.AmmoReserve = null;
                    if (A_FindStorage())
                    {
                        A_TryLoadChamber();
                    }
                }
            }
            return;
        }
        if (A_FindStorage())
        {
            A_TryLoadChamber();
        }
    }

    private action bool A_FindStorage()
    {
        for (Inventory Next = Inv; Next; Next = Next.Inv)
        {
            let bp = HDBackpack(Next);
            if (bp && bp.Storage)
            {
                let nma = bp.Storage.Find('HD6mmFlechetteAmmo');
                if (nma && nma.Amounts.Size() > 0 && nma.Amounts[0] > 0)
                {
                    invoker.AmmoReserve = nma;
                    invoker.Storage = bp;
                    return true;
                }
            }
        }
        return false;
    }

    private HDBackpack Storage;
    private StorageItem AmmoReserve;
    private int BurstIndex;
    transient int OldFireMode;

    Default
    {
        -HDWEAPON.FITSINBACKPACK
        +HDWEAPON.HINDERLEGS
        Weapon.SelectionOrder 69;
        Weapon.SlotNumber 4;
        Weapon.SlotPriority 1.75;
        HDWeapon.BarrelSize 32, 4, 6;
        Scale 0.75;
        Tag "$TAG_TARONGA";
        HDWeapon.Refid HDLD_TARONGA;
        HDWeapon.Loadoutcodes
        "\n\cu   gl - Grenade Launcher";
    }

    States
    {
        Spawn:
            HRFP A 0 NoDelay A_JumpIf(invoker.WeaponStatus[TRProp_Flags] & TRF_GL, 2);
            HRFP B 0;
            #### # -1;
            Stop;
        Ready:
            HRFL A 1
            {
                if (JustPressed(BT_FIREMODE))
                {
                    invoker.OldFireMode = invoker.WeaponStatus[TRProp_Mode];
                    int maxMode = 3;
                    ++invoker.WeaponStatus[TRProp_Mode] %= maxMode;
                }
                invoker.BurstIndex = 0;
                A_WeaponReady(WRF_ALL & ~WRF_ALLOWUSER2);
            }
            Goto ReadyEnd;
        Select0:
            HRFL A 0;
            Goto Select0Big;
        Deselect0:
            HRFL A 0;
            Goto Deselect0Big;

        Fire:
            HRFL A 1
            {
                if (invoker.WeaponStatus[TRProp_Chamber] == 1)
                {
                    SetWeaponState("Shoot");
                    return;
                }
            }
            Goto Nope;
        Shoot:
            HRFL A 0
            {
                if(invoker.WeaponStatus[TRProp_Chamber] > 1)
                {
                    SetWeaponState("nope");
                    return;
                }
            }
            HRFL A 1
            {
                if (invoker.WeaponStatus[TRProp_Mode] == 1 || invoker.WeaponStatus[TRProp_Mode] == 3)
                {
                    A_SetTics(0);
                }
            }
            HRFL F 2 Bright Offset(0, 34)
            {
                int heat = min(50, invoker.weaponStatus[TRProp_Heat]);
                if (invoker.WeaponStatus[TRProp_Mode] == 1 || invoker.WeaponStatus[TRProp_Mode] == 3)
                {
                    A_SetTics(1);
                }
                A_StartSound("weapons/TarongaBoltBack", 8, CHAN_WEAPON, CHANF_OVERLAP, volume: 0.4);
                HDBulletActor.FireBullet(self, "HDB_MM6mmFlechette");
                A_AlertMonsters(HDCONST_ONEMETRE * (30 + heat));
                invoker.WeaponStatus[TRProp_Chamber] = 0;
                invoker.WeaponStatus[TRProp_Heat] += random(3, 7);
                invoker.WeaponStatus[TRProp_Muck] += random(0, 1);
                A_StartSound("weapons/taronga", CHAN_WEAPON, CHANF_OVERLAP, volume: 0.7);
                A_ZoomRecoil(1.05);
                A_MuzzleClimb(-frandom(-0.45, 0.45), -frandom(0.49, 0.59), -frandom(-0.3, 0.35), -frandom(0.4, 0.48), -frandom(-0.24, 0.24), -frandom(0.3, 0.36));
                A_Light1();
                A_WeaponReady(WRF_NOFIRE);
            }
            HRFL A 0
            {
                if(random(0,invoker.jamchance())>55)
                {
                    invoker.WeaponStatus[TRProp_Chamber] = 2;
                }
                if (invoker.WeaponStatus[TRProp_Chamber] == 0)
                {
                    A_TryLoadChamber();
                    A_StartSound("weapons/TarongaBoltFwd", 8, CHAN_WEAPON, CHANF_OVERLAP, volume: 0.4);
                    A_EjectCasing("HDSpent6mmFlechette",frandom(-1,2),(frandom(0.2,0.3),-frandom(7,7.5),frandom(0,0.2)),(0,0,-2));
                }
                if (invoker.WeaponStatus[TRProp_Heat] > 250 && !random(0, 5))
                {
                    invoker.WeaponStatus[TRProp_Chamber] = 0;
                }
            }
            HRFL A 0
            {
                switch (invoker.WeaponStatus[TRProp_Mode])
                {
                    case 1:
                    {
                        if (invoker.BurstIndex < 2)
                        {
                            invoker.BurstIndex++;
                            A_Refire('Fire');
                        }
                        break;
                    }
                    case 2:
                    {
                        A_Refire('Fire');
                        break;
                    }
                }
            }
            Goto Nope;

		AltFire:
            HRFL A 1
            {
                if(PressingZoom() && invoker.WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
                {
                    SetWeaponState("FireGL");
                }
            }
			#### A 1 Offset(0, 34) A_WeaponBusy();
			#### A 1 Offset(1, 35);
			#### A 1 Offset (2, 36) A_JumpIf(invoker.weaponstatus[TRProp_Chamber]>1,"startjamderp");
			#### A 1 Offset(3, 37) A_MuzzleClimb(-frandom(0.06,0.1),-frandom(0.3,0.5));
			#### A 1 Offset(4, 38) A_ChamberGrit(randompick(0,0,1,1,2,3,4),true);
			#### A 0 A_Refire("chamber");
			goto ready;

		AltHold:
			HRFL A 1 A_WeaponReady(WRF_NOFIRE);
			#### A 1{
				A_ClearRefire();
				bool ChamberEmpty = invoker.WeaponStatus[TRProp_Chamber]<1;
				if (PressingUnload())
				{
					if(ChamberEmpty)
					{
						return resolvestate("altholdclean");
					}
					else
					{
						invoker.WeaponStatus[TRProp_LoadType] = 0;
						return resolvestate("loadchamber");
					}
				}
				else if(PressingReload())
				{
					if(!ChamberEmpty)
					{
						invoker.WeaponStatus[TRProp_LoadType] = 0;
						return resolvestate("loadchamber");
					}
					else if (CheckInventory("HD6mmFlechetteAmmo", 1))
					{
						invoker.WeaponStatus[TRProp_LoadType] = 1;
						return resolvestate("loadchamber");
					}
				}

				if (PressingAltFire())
				{
					return ResolveState("AltHold");
				}

				return resolvestate("altholdend");
			}
		Chamber:
			#### A 3 Offset(6, 42)
			{
				A_StartSound("Weapons/TarongaBoltBack", 8);
				if (GunBraced())
				{
					A_MuzzleClimb(frandom(-0.1, 0.3), frandom(-0.1, 0.3));
				}
				else
				{
					A_MuzzleClimb(frandom(-0.2, 0.8), frandom(-0.4, 0.8));
				}
			}
			#### A 2 Offset(6, 42)
			{
                if(invoker.WeaponStatus[TRProp_Chamber] == 1)
                {
                    A_EjectCasing("HD6mmFlechetteAmmo",frandom(-1,2),(frandom(0.2,0.3),-frandom(7,7.5),frandom(0,0.2)),(0,0,-2));
                    invoker.WeaponStatus[TRProp_Chamber] = 0;
                    A_TryLoadChamber();
                }
                if(invoker.WeaponStatus[TRProp_Chamber] == 0)
                {
                    A_TryLoadChamber();
                }
                else
                {
                    SetWeaponState("AltHold");
                }
			}
			#### A 2 Offset(7, 44);
			#### A 1 Offset(5, 42);
			#### A 1 Offset(1, 34);
			#### A 1 A_WeaponReady(WRF_NOFIRE);
			#### A 0 A_Refire("AltHold");
			Goto AltHoldEnd;

		LoadChamber:
			#### # 1 Offset(2, 36) A_ClearRefire();
			#### # 1 Offset(3, 38);
			#### # 1 Offset(5, 42);
			#### # 1 Offset(8, 48) A_StartSound("weapons/pocket", 9);
			#### # 1 Offset(9, 52) A_MuzzleClimb(frandom(-0.2, 0.2), 0.2, frandom(-0.2, 0.2),0.2, frandom(-0.2, 0.2), 0.2);
			#### # 1 Offset(8, 60);
			#### # 1 Offset(7, 72);
			#### # 1 Offset(6, 80);
			#### # 1 Offset(6, 88);
			TNT1 # 25;
			TNT1 # 4
			{
				A_StartSound("weapons/TarongaLoad", 8, volume: 0.7);
				switch (invoker.WeaponStatus[TRProp_LoadType])
				{
					case 0:
						int Chamber = invoker.WeaponStatus[TRProp_Chamber];
						invoker.WeaponStatus[TRProp_Chamber] = 0;
						if (Chamber == 2 || A_JumpIfInventory("HD6mmFlechetteAmmo", 0, "null"))
						{
							Class<actor> EjectClass = Chamber == 2 ? "HD6mmFlechetteAmmo" : "HDSpent6mmFlechette";
							actor rrr = Spawn(EjectClass, pos + (cos(angle) * 10, sin(angle) * 10,  height - 12), ALLOW_REPLACE);
							rrr.angle = angle;
							rrr.A_ChangeVelocity(1, 2, 1, CVF_RELATIVE);
						}
						else
						{
							HDF.Give(self, "HD6mmFlechetteAmmo", 1);
						}
						A_ChamberGrit(randompick(0,0,0,0,-1,1),true);
						break;
					case 1:
						A_TakeInventory("HD6mmFlechetteAmmo", 1, TIF_NOTAKEINFINITE);
						invoker.WeaponStatus[TRProp_Chamber] = 1;
						break;
				}
			} 
			HRFL # 2 Offset(6, 80);
			#### # 2 Offset(7, 72);
			#### # 2 Offset(8, 60);
			#### # 1 Offset(7, 52);
			#### # 1 Offset(5, 42);
			#### # 1 Offset(3, 38);
			#### # 1 Offset(3, 35);
			Goto AltHold;
			
		AltHoldClean:
			HRFL A 1 offset(2,36) A_ClearRefire();
			#### A 1 offset(3,38);
			#### A 1 offset(5,41) A_Log(StringTable.Localize("$BOSS_CLEANS"),true);
			#### A 1 offset(8,44) A_StartSound("weapons/pocket",9);
			#### A 1 offset(7,50) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,wepdot:false);
			TNT1 A 3 A_StartSound("weapons/pocket",10);
			TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),wepdot:false);
			TNT1 A 3 A_StartSound("weapons/pocket",9);
			TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),wepdot:false);
			TNT1 A 40{
				A_StartSound("weapons/pocket",9);
				int amt=invoker.weaponstatus[TRProp_Muck];
				string amts=StringTable.Localize("$BOSS_CLEAN1");
				if(amt>80)amts=StringTable.Localize("$BOSS_CLEAN2");
				else if(amt>60)amts=StringTable.Localize("$BOSS_CLEAN3");
				else if(amt>40)amts=StringTable.Localize("$BOSS_CLEAN4");
				else if(amt>20)amts=StringTable.Localize("$BOSS_CLEAN5");

				string cleanverbs[]={"$BOSS_EXTRACT","$BOSS_SCRAPEOFF","$BOSS_WIPEAWAY","$BOSS_CAREREMOVE","$BOSS_DUMPOUT","$BOSS_PICKOUT","$BOSS_BLOWOFF","$BOSS_SHAKEOUT","$BOSS_SCRUBOFF","$BOSS_FISH"};
				string contaminants[]={"$BOSS_SOMEDUST","$BOSS_ALODUST","$BOSS_ABOPOWDER","$BOSS_DAOPOWDER","$BOSS_SEXGREASE","$BOSS_ALOSOOT","$BOSS_SOMEIRON","$BOSS_HAIR","$BOSS_EYELASH","$BOSS_BLOOD","$BOSS_RUST","$BOSS_CRUMB","$BOSS_DEADSOME","$BOSS_ASHES","$BOSS_SKIN","$BOSS_FLUID","$BOSS_WOWSOME","$BOSS_BOOGER","$BOSS_FECAL","$BOSS_BULLETSIMPACT","$BOSS_JAM","$BOSS_HUSK","$BOSS_SFLESH","$BOSS_CRYSTAL","$BOSS_SPACEANT","$BOSS_TRANSISTOR","$BOSS_TINBOSS","$BOSS_FILM"};
				string actionparts[]={"$BOSS_BOLTCAR","$BOSS_MAINEXTRACTOR","$BOSS_AUXEXTRACTOR","$BOSS_CAMPIN","$BOSS_BOLTHEAD","$BOSS_STRIKER","$BOSS_SPRING","$BOSS_EJECTSLOT","$BOSS_STRIKERSPRING","$BOSS_EJSPRING"};
				for(int i=amt;i>0;i-=random(16,32))amts.appendformat(StringTable.Localize("$BOSS_FINLINE"),
					StringTable.Localize(cleanverbs[random(0,cleanverbs.size()-1)]),
					StringTable.Localize(contaminants[random(0,random(0,contaminants.size()-1))]),
					StringTable.Localize(actionparts[random(0,random((actionparts.size()>>1),actionparts.size()-1))])
				);
				amts=HDMath.BuildVariableString(amts);
				amts.appendformat("\n");

				amt=randompick(-3,-5,-5,-random(16,32));

				A_ChamberGrit(amt,true);
				amt=invoker.weaponstatus[TRProp_Muck];
				if(amt>40)amts.appendformat(StringTable.Localize("$BOSS_CLENF1"));
				else if(amt>30)amts.appendformat(StringTable.Localize("$BOSS_CLENF2"));
				else if(amt>20)amts.appendformat(StringTable.Localize("$BOSS_CLENF3"));
				else if(amt>10)amts.appendformat(StringTable.Localize("$BOSS_CLENF4"));
				else amts.appendformat(StringTable.Localize("$BOSS_CLENF5"));
				A_Log(amts,true);
			}
			HRFL A 1 offset(7,52);
			#### A 1 offset(8,48);
			#### A 1 offset(5,42);
			#### A 1 offset(3,38);
			#### A 1 offset(2,36);
			goto althold;

		AltHoldEnd:
			#### A 2 A_StartSound("weapons/TarongaBoltFwd", 8);
			Goto Ready;

        Jam: 
            #### A 0 {
                int chm = invoker.WeaponStatus[TRProp_Chamber];
                if(chm<1)SetWeaponState("chamber");
            }
        StartJamDerp:
            #### A 0{
                A_StartSound("weapons/tarongachamber",8,CHANF_OVERLAP);
            }
            #### A 1 offset(0,34);
            #### A 2 offset(1,35);
            #### A 2 offset(3,37) A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
            #### A 2 offset(0,34);
            #### A 0 SetWeaponState("JamDerp");
        
        JamDerp:
            #### A 0 A_StartSound("weapons/tarongachamber",8,CHANF_OVERLAP);
            #### A 1 offset(0,34);
            #### A 2 offset(1,35);
            #### A 2 offset(3,37) A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
            #### A 2 offset(0,34);
            #### A 3 offset(4,38){
                A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
                if(random(0,invoker.jamchance())<36){
                    SetWeaponState("Chamber");
                    if(invoker.WeaponStatus[TRProp_Chamber]==2)
                        invoker.WeaponStatus[TRProp_Chamber]=0;
                }
            }
            #### A 2 offset(4,38);
			#### A 3 offset(2,36);
			#### A 0 A_Refire("jamderp");
			goto ready;

        Unload:
            #### A 0
            {
                invoker.WeaponStatus[TRProp_Flags] |= TRF_JustUnload;
                if (PressingFiremode() && invoker.WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
                {
                    SetWeaponState('UnloadGL');
                }
            }
            Goto Nope;

        AltReload:
            #### A 0
            {
                invoker.WeaponStatus[TRProp_Flags] &= ~TRF_JustUnload;
                if (invoker.WeaponStatus[TRProp_Flags] & TRF_GL && !(invoker.WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded) && CheckInventory("WAN_20mmGrenadeAmmo", 1))
                {
                    SetWeaponState('UnloadGL');
                }
            }
            Goto Nope;

        FireGL:
            HRFL F 2 Bright
            {
                if(invoker.WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
                {
                    A_Fire20mmGL();
                    invoker.WeaponStatus[TRProp_Flags] &= ~TRF_GrenadeLoaded;
                    A_StartSound("weapons/tarongagrenadeshot", CHAN_WEAPON);
                    A_ZoomRecoil(0.95);
                }
            }
            HRFL A 1 A_MuzzleClimb(0, 0, 0, 0, -1.0, -2.2, -0.65, -1.8);
            goto Nope;

        UnloadGL:
            #### A 0
            {
                A_SetCrosshair(21);
                A_MuzzleClimb(-0.3, -0.3);
            }
            #### A 2 Offset(0, 34);
            #### A 1 Offset(4, 38) A_MuzzleClimb(-0.3,-0.3);
            #### A 2 Offset(8, 48)
            {
                A_StartSound("weapons/targrenopen", CHAN_WEAPON, CHANF_OVERLAP);
                A_MuzzleClimb(-0.3, -0.3);

                if (invoker.WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded)
                {
                    A_StartSound("weapons/targrenreload", CHAN_WEAPON);
                }
            }
            #### A 8 Offset(10, 49)
            {
                if (!(invoker.WeaponStatus[TRProp_Flags] & TRF_GrenadeLoaded))
                {
                    if (invoker.WeaponStatus[TRProp_Flags] & TRF_JustUnload)
                    {
                        A_SetTics(3);
                    }
                    return;
                }
                invoker.WeaponStatus[TRProp_Flags] &= ~TRF_GrenadeLoaded;
                if(!PressingUnload() || A_JumpIfInventory('WAN_20mmGrenadeAmmo', 0, 'Null'))
                {
                    A_SpawnItemEx('WAN_20mmGrenadeAmmo', cos(pitch) * 10, 0, height - 10 - 10 * sin(pitch), vel.x, vel.y, vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
                }
                else
                {
                    A_SetTics(20);
                    A_StartSound("weapons/pocket", CHAN_WEAPON, CHANF_OVERLAP);
                    A_GiveInventory('WAN_20mmGrenadeAmmo', 1);
                    A_MuzzleClimb(frandom(0.8, -0.2), frandom(0.4, -0.2));
                }
            }
            #### A 0 A_JumpIf(invoker.WeaponStatus[TRProp_Flags] & TRF_JustUnload, 'ReloadEndGL');
        LoadGL:
            #### A 2 Offset(10, 50) A_StartSound("weapons/pocket", CHAN_WEAPON,  CHANF_OVERLAP);
            #### AAA 5 Offset(10, 50) A_MuzzleClimb(frandom(-0.2, 0.8), frandom(-0.2, 0.4));
            #### A 15 Offset(8, 50)
            {
                A_TakeInventory('WAN_20mmGrenadeAmmo', 1, TIF_NOTAKEINFINITE);
                invoker.WeaponStatus[TRProp_Flags] |= TRF_GrenadeLoaded;
                A_StartSound("weapons/targrenreload", CHAN_WEAPON);
            }
        ReloadEndGL:
            #### A 4 Offset(4, 44) A_StartSound("weapons/targrenclose", CHAN_WEAPON);
            #### A 1 Offset(0, 40);
            #### A 1 Offset(0, 34) A_MuzzleClimb(frandom(-2.4, 0.2), frandom(-1.4, 0.2));
            Goto Nope;
    }
}

class HDTarongaRandom : IdleDummy
{
    States
    {
        Spawn:
            TNT1 A 0 NoDelay
            {
                name ammoPouch = 'UaS_AmmoPouch';
                let wpn = HDTaronga(Spawn("HDTaronga", pos, ALLOW_REPLACE));
                if (!wpn)
                {
                    return;
                }

                HDF.TransferSpecials(self, wpn);
                if (!random(0, 3))
                {
                    wpn.WeaponStatus[wpn.TRProp_Flags] |= wpn.TRF_GL;
                }
                wpn.InitializeWepStats(false);
                if(HDCore.CheckClassExists(ammoPouch)) spawn(ammoPouch,pos+(random(-7,7),0,0),ALLOW_REPLACE); 
                spawn("HD6mmFlechetteBoxPickup",pos+(random(-7,7),0,0),ALLOW_REPLACE);
                spawn("HD6mmFlechetteBoxPickup",pos+(random(-5,5),0,0),ALLOW_REPLACE);
            }
            Stop;
    }
}